require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EcolesController do

  # This should return the minimal set of attributes required to create a valid
  # Ecole. As you add validations to Ecole, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "nom" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EcolesController. Be sure to keep this updated too.
  #let(:valid_session) { {} }

  describe "GET index" do
    describe "valid session" do
      it "assigns all ecoles as @ecoles" do
        user = FactoryGirl.create(:user_admin)
        role = FactoryGirl.create(:role)
        user.roles= [role]

        sign_in(user)

        #ecole = Ecole.create! valid_attributes

        #allow(Ecole).to receive(:all) {[ecole]}
        get :index, {}
        is_expected.to render_template(:index)
        #assigns(:ecoles).should eq([ecole])
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :user})

      get :index, {}

      is_expected.to redirect_to(new_user_session_path)

    end
  end

  describe "GET show" do
    describe "valid session" do
      it "assigns the requested ecole as @ecole" do
        user = FactoryGirl.create(:user_admin)
        role = FactoryGirl.create(:role)
        user.roles= [role]

        sign_in(user)

        ecole = Ecole.create! valid_attributes
        allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}

        get :show, {:id => ecole.to_param}
        expect(assigns(:ecole)).to eq(ecole)
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :user})

      ecole = Ecole.create! valid_attributes
      allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}

      get :show, {:id => ecole.to_param}

      expect(response).to redirect_to(new_user_session_path)
    end
  end

  describe "GET new" do
    describe "valid session" do
      it "assigns a new ecole as @ecole" do
        user = FactoryGirl.create(:user_admin)
        role = FactoryGirl.create(:role)
        user.roles= [role]

        sign_in(user)

        get :new, {}

        expect(assigns(:ecole)).to be_a_new(Ecole)
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :user})

      get :new, {}

      expect(response).to redirect_to(new_user_session_path)
    end
  end

  describe "GET edit" do
    describe "valid session" do
      it "assigns the requested ecole as @ecole" do
        user = FactoryGirl.create(:user_admin)
        role = FactoryGirl.create(:role)
        user.roles= [role]

        sign_in(user)

        ecole = Ecole.create! valid_attributes
        allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}

        get :edit, {:id => ecole.to_param}
        expect(assigns(:ecole)).to eq(ecole)
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :user})

      ecole = Ecole.create! valid_attributes
      allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}

      get :edit, {:id => ecole.to_param}

      expect(response).to redirect_to(new_user_session_path)
    end
  end

  describe "POST create" do
    describe "valid session" do
      describe "with valid params" do
        it "creates a new Ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          expect {
            post :create, {:ecole => valid_attributes}
          }.to change(Ecole, :count).by(1)
        end

        it "assigns a newly created ecole as @ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          post :create, {:ecole => valid_attributes}
          expect(assigns(:ecole)).to be_a(Ecole)
          expect(assigns(:ecole)).to be_persisted
        end

        it "redirects to the created ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          post :create, {:ecole => valid_attributes}
          expect(response).to redirect_to(Ecole.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved ecole as @ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          # Trigger the behavior that occurs when invalid params are submitted
          Ecole.any_instance.stub(:save).and_return(false)
          post :create, {:ecole => { "nom" => "invalid value" }}
          expect(assigns(:ecole)).to be_a_new(Ecole)
        end

        it "re-renders the 'new' template" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          # Trigger the behavior that occurs when invalid params are submitted
          Ecole.any_instance.stub(:save).and_return(false)
          post :create, {:ecole => { "nom" => "invalid value" }}
          expect(response).to render_template("new")
        end
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :user})

      post :create, {:ecole => valid_attributes}

      expect(response).to redirect_to(new_user_session_path)
    end
  end

  describe "PUT update" do
    describe "valid session" do
      describe "with valid params" do
        it "updates the requested ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          ecole = Ecole.create! valid_attributes
          # Assuming there are no other ecoles in the database, this
          # specifies that the ecole created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
          Ecole.any_instance.should_receive(:update).with({ "nom" => "MyString" })
          put :update, {:id => ecole.to_param, :ecole => { "nom" => "MyString" }}
        end

        it "assigns the requested ecole as @ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          ecole = Ecole.create! valid_attributes
          allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
          put :update, {:id => ecole.to_param, :ecole => valid_attributes}
          expect(assigns(:ecole)).to eq(ecole)
        end

        it "redirects to the ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          ecole = Ecole.create! valid_attributes
          allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
          put :update, {:id => ecole.to_param, :ecole => valid_attributes}
          expect(response).to redirect_to(ecole)
        end
      end

      describe "with invalid params" do
        it "assigns the ecole as @ecole" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          ecole = Ecole.create! valid_attributes
          allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
          # Trigger the behavior that occurs when invalid params are submitted
          Ecole.any_instance.stub(:save).and_return(false)
          put :update, {:id => ecole.to_param, :ecole => { "nom" => "invalid value" }}
          expect(assigns(:ecole)).to eq(ecole)
        end

        it "re-renders the 'edit' template" do
          user = FactoryGirl.create(:user_admin)
          role = FactoryGirl.create(:role)
          user.roles= [role]

          sign_in(user)

          ecole = Ecole.create! valid_attributes
          allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
          # Trigger the behavior that occurs when invalid params are submitted
          Ecole.any_instance.stub(:save).and_return(false)
          put :update, {:id => ecole.to_param, :ecole => { "nom" => "invalid value" }}
          expect(response).to render_template("edit")
        end
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :user})

      ecole = Ecole.create! valid_attributes
      allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
      put :update, {:id => ecole.to_param, :ecole => valid_attributes}

      expect(response).to redirect_to(new_user_session_path)
    end
  end

  describe "DELETE destroy" do
    describe "valid session" do
      it "destroys the requested ecole" do
        user = FactoryGirl.create(:user_admin)
        role = FactoryGirl.create(:role)
        user.roles= [role]

        sign_in(user)

        ecole = Ecole.create! valid_attributes
        allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
        expect {
          delete :destroy, {:id => ecole.to_param}
        }.to change(Ecole, :count).by(-1)
      end

      it "redirects to the ecoles list" do
        user = FactoryGirl.create(:user_admin)
        role = FactoryGirl.create(:role)
        user.roles= [role]

        sign_in(user)

        ecole = Ecole.create! valid_attributes
        allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
        delete :destroy, {:id => ecole.to_param}
        expect(response).to redirect_to(ecoles_url)
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :user})

      ecole = Ecole.create! valid_attributes
      allow(Ecole).to receive(:find).with(ecole.id.to_s) {ecole}
      delete :destroy, {:id => ecole.to_param}

      expect(response).to redirect_to(new_user_session_path)
    end
  end
end
