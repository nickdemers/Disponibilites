require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UtilisateursController do

  # This should return the minimal set of attributes required to create a valid
  # Utilisateur. As you add validations to Utilisateur, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "courriel" => "utilisateur@courriel.ca", "nom" => "Nom", "prenom" => "PrÃ©nom", "numero_telephone" => "444 444-4444", "titre" => "Permanent" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UtilisateursController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all utilisateurs as @utilisateurs" do
      Disponibilite.stub(:where).with("(statut = 'attente' or statut = 'disponible') and date_heure_debut between :date_debut and :date_fin",{date_debut: Date.current, :date_fin=> Date.current + 2.months}).and_return(nil)

      utilisateur = create(:utilisateur_permanent)
      Utilisateur.stub(:all).and_return([utilisateur])

      get :index, {}, valid_session
      assigns(:utilisateurs).should eq([utilisateur])
    end
  end

  describe "GET show" do
    it "assigns the requested utilisateur as @utilisateur" do
      Disponibilite.stub(:where).with("(statut = 'attente' or statut = 'disponible') and date_heure_debut between :date_debut and :date_fin",{date_debut: Date.current, :date_fin=> Date.current + 2.months}).and_return(nil)

      utilisateur = create(:utilisateur_permanent)
      Utilisateur.stub(:find).with(utilisateur.id.to_s).and_return(utilisateur)

      get :show, {:id => utilisateur}, valid_session
      assigns(:utilisateur).should eq(utilisateur)
    end
  end

  describe "GET new" do
    it "assigns a new utilisateur as @utilisateur" do
      Disponibilite.stub(:where).with("(statut = 'attente' or statut = 'disponible') and date_heure_debut between :date_debut and :date_fin",{date_debut: Date.current, :date_fin=> Date.current + 2.months}).and_return(nil)

      get :new, {}, valid_session
      assigns(:utilisateur).should be_a_new(Utilisateur)
    end
  end

  describe "GET edit" do
    it "assigns the requested utilisateur as @utilisateur" do
      Disponibilite.stub(:where).with("(statut = 'attente' or statut = 'disponible') and date_heure_debut between :date_debut and :date_fin",{date_debut: Date.current, :date_fin=> Date.current + 2.months}).and_return(nil)

      utilisateur = create(:utilisateur_permanent)
      Utilisateur.stub(:find).with(utilisateur.id.to_s).and_return(utilisateur)

      get :edit, {:id => utilisateur.to_param}, valid_session
      assigns(:utilisateur).should eq(utilisateur)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      #it "creates a new Utilisateur" do
      #  utilisateur = create(:utilisateur_permanent)
      #  Utilisateur.stub(:new).and_return(utilisateur)
      #  expect {
      #    post :create, {:utilisateur => valid_attributes}, valid_session
      #  }.to change(Utilisateur, :count).by(1)
      #end

      it "assigns a newly created utilisateur as @utilisateur" do
        utilisateur = create(:utilisateur_permanent)
        Utilisateur.stub(:new).and_return(utilisateur)

        utilisateur.stub(:save).and_return(true)

        post :create, {:utilisateur => valid_attributes}, valid_session
        assigns(:utilisateur).should be_a(Utilisateur)
        assigns(:utilisateur).should be_persisted
      end

      #it "redirects to the created utilisateur" do
      #  utilisateur = create(:utilisateur_permanent)
      #  Utilisateur.stub(:new).and_return(utilisateur)

      #  utilisateur.stub(:save).and_return(true)

      #  post :create, {:utilisateur => valid_attributes}, valid_session
      #  response.should redirect_to(Utilisateur.last)
      #end
    end

    describe "with invalid params" do
      before(:each) do
        Disponibilite.stub(:where).with("(statut = 'attente' or statut = 'disponible') and date_heure_debut between :date_debut and :date_fin",{date_debut: Date.current, :date_fin=> Date.current + 2.months}).and_return(nil)
      end

      it "assigns a newly created but unsaved utilisateur as @utilisateur" do
        #utilisateur = create(:utilisateur_permanent)
        #Utilisateur.stub(:new).and_return(utilisateur)

        # Trigger the behavior that occurs when invalid params are submitted
        Utilisateur.any_instance.stub(:save).and_return(false)
        post :create, {:utilisateur => valid_attributes}, valid_session
        assigns(:utilisateur).should be_a_new(Utilisateur)
      end

      it "re-renders the 'new' template" do
        #utilisateur = create(:utilisateur_permanent)
        #Utilisateur.stub(:new).and_return(utilisateur)

        # Trigger the behavior that occurs when invalid params are submitted
        Utilisateur.any_instance.stub(:save).and_return(false)
        post :create, {:utilisateur => valid_attributes}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before(:each) do
        @utilisateur = create(:utilisateur_permanent)
        Utilisateur.stub(:find).with(@utilisateur.id.to_s).and_return(@utilisateur)
      end

      it "updates the requested utilisateur" do
        # Assuming there are no other utilisateurs in the database, this
        # specifies that the Utilisateur created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Utilisateur.any_instance.should_receive(:update).with( valid_attributes).and_return(true)
        put :update, {:id => @utilisateur.to_param, :utilisateur => valid_attributes}, valid_session
      end

      it "assigns the requested utilisateur as @utilisateur" do
        put :update, {:id => @utilisateur.to_param, :utilisateur => valid_attributes}, valid_session
        assigns(:utilisateur).should eq(@utilisateur)
      end

      it "redirects to the utilisateur" do
        put :update, {:id => @utilisateur.to_param, :utilisateur => valid_attributes}, valid_session
        response.should redirect_to(@utilisateur)
      end
    end

    describe "with invalid params" do
      before(:each) do
        Disponibilite.stub(:where).with("(statut = 'attente' or statut = 'disponible') and date_heure_debut between :date_debut and :date_fin",{date_debut: Date.current, :date_fin=> Date.current + 2.months}).and_return(nil)

        @utilisateur = create(:utilisateur_permanent)
        Utilisateur.stub(:find).with(@utilisateur.id.to_s).and_return(@utilisateur)
      end

      it "assigns the utilisateur as @utilisateur" do
        # Trigger the behavior that occurs when invalid params are submitted
        Utilisateur.any_instance.stub(:save).and_return(false)
        put :update, {:id => @utilisateur.to_param, :utilisateur => valid_attributes}, valid_session
        assigns(:utilisateur).should eq(@utilisateur)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Utilisateur.any_instance.stub(:save).and_return(false)
        put :update, {:id => @utilisateur.to_param, :utilisateur => valid_attributes}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      @utilisateur = create(:utilisateur_permanent)
      Utilisateur.stub(:find).with(@utilisateur.id.to_s).and_return(@utilisateur)
    end
    #it "destroys the requested utilisateur" do
    #  expect {
    #    delete :destroy, {:id => @utilisateur.to_param}, valid_session
    #  }.to change(Utilisateur, :count).by(-1)
    #end

    it "redirects to the utilisateurs list" do
      delete :destroy, {:id => @utilisateur.to_param}, valid_session
      response.should redirect_to(utilisateurs_url)
    end
  end
end
