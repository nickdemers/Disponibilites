require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RolesController do

  # This should return the minimal set of attributes required to create a valid
  # Role. As you add validations to Role, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "nom" => "Nom" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RolesController. Be sure to keep this updated too.
  #let(:valid_session) { {} }

  describe "GET index" do
    describe "valid session" do
      it "assigns all roles as @roles" do
        utilisateur_session = double('utilisateur')
        allow(request.env['warden']).to receive(:authenticate!) { utilisateur_session }

        role = create(:role)

        allow(Role).to receive(:all) {[role]}

        get :index, {}
        assigns(:roles).should eq([role])
      end
    end
    describe "invalid session" do
      it "not connected" do
        allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :utilisateur})

        get :index, {}

        response.should redirect_to(new_utilisateur_session_path)
      end
    end
  end

  describe "GET show" do
    describe "valid session" do
      it "assigns the requested role as @role" do
        utilisateur_session = double('utilisateur')
        allow(request.env['warden']).to receive(:authenticate!) { utilisateur_session }

        role = create(:role)

        allow(Role).to receive(:find).with(role.id.to_s) {role}

        get :show, {:id => role.to_param}
        assigns(:role).should eq(role)
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :utilisateur})

      role = create(:role)
      get :show, {:id => role.to_param}

      response.should redirect_to(new_utilisateur_session_path)
    end
  end

  describe "GET new" do
    describe "valid session" do
      it "assigns a new role as @role" do
        utilisateur_session = double('utilisateur')
        allow(request.env['warden']).to receive(:authenticate!) { utilisateur_session }

        get :new, {}
        assigns(:role).should be_a_new(Role)
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :utilisateur})

      get :new, {}

      response.should redirect_to(new_utilisateur_session_path)
    end
  end

  describe "GET edit" do
    describe "valid session" do
      it "assigns the requested role as @role" do
        utilisateur_session = double('utilisateur')
        allow(request.env['warden']).to receive(:authenticate!) { utilisateur_session }

        role = create(:role)

        allow(Role).to receive(:find).with(role.id.to_s) {role}

        get :edit, {:id => role.to_param}
        assigns(:role).should eq(role)
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :utilisateur})

      role = create(:role)

      allow(Role).to receive(:find).with(role.id.to_s) {role}

      get :edit, {:id => role.to_param}

      response.should redirect_to(new_utilisateur_session_path)
    end
  end

  describe "POST create" do
    describe "valid session" do
      before(:each) do
        utilisateur_session = double('utilisateur')
        allow(request.env['warden']).to receive(:authenticate!) { utilisateur_session }
      end

      describe "with valid params" do
        it "assigns a newly created role as @role" do
          role = create(:role)
          allow(Role).to receive(:new) {role}
          allow(role).to receive(:save) {true}

          post :create, {:role => valid_attributes}
          assigns(:role).should be_a(Role)
          assigns(:role).should be_persisted
        end

        it "redirects to the created role" do
          role = create(:role)
          allow(Role).to receive(:new) {role}
          allow(role).to receive(:save) {true}

          post :create, {:role => valid_attributes}
          response.should redirect_to(role)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved role as @role" do
          role = create(:role)
          allow(Role).to receive(:new) {role}
          allow(role).to receive(:save) {false}

          post :create, {:role => valid_attributes}
          assigns(:role).should be_a(Role)
          assigns(:role).should be_persisted
        end

        it "re-renders the 'new' template" do
          role = create(:role)
          allow(Role).to receive(:new) {role}
          allow(role).to receive(:save) {false}

          post :create, {:role => valid_attributes}
          response.should render_template("new")
        end
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :utilisateur})

      post :create, {:role => valid_attributes}

      response.should redirect_to(new_utilisateur_session_path)
    end
  end

  describe "PUT update" do
    describe "valid session" do
      before(:each) do
        utilisateur_session = double('utilisateur')
        allow(request.env['warden']).to receive(:authenticate!) { utilisateur_session }
      end

      describe "with valid params" do
        it "updates the requested role" do
          role = create(:role)
          allow(Role).to receive(:find).with(role.id.to_s) {role}

          # Assuming there are no other roles in the database, this
          # specifies that the Role created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Role.any_instance.should_receive(:update).with({ "nom" => "" })
          put :update, {:id => role.to_param, :role => { "nom" => "" }}
        end

        it "assigns the requested role as @role" do
          role = create(:role)
          allow(Role).to receive(:find).with(role.id.to_s) {role}

          put :update, {:id => role.to_param, :role => valid_attributes}
          assigns(:role).should eq(role)
        end

        it "redirects to the role" do
          role = create(:role)
          allow(Role).to receive(:find).with(role.id.to_s) {role}

          put :update, {:id => role.to_param, :role => valid_attributes}
          response.should redirect_to(role)
        end
      end

      describe "with invalid params" do
        it "assigns the role as @role" do
          role = create(:role)
          allow(Role).to receive(:find).with(role.id.to_s) {role}

          # Trigger the behavior that occurs when invalid params are submitted
          #Role.any_instance.stub(:save).and_return(false)
          allow(Role).to receive(:save) {false}

          put :update, {:id => role.to_param, :role => valid_attributes}
          assigns(:role).should eq(role)
        end

        it "re-renders the 'edit' template" do
          role = create(:role)
          allow(Role).to receive(:find).with(role.id.to_s) {role}

          # Trigger the behavior that occurs when invalid params are submitted
          #allow(Role).to receive(:save) {false}
          Role.any_instance.stub(:save).and_return(false)

          put :update, {:id => role.to_param, :role => valid_attributes}
          response.should render_template("edit")
        end
      end
    end
    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :utilisateur})

      role = Role.create! valid_attributes
      put :update, {:id => role.to_param, :role => valid_attributes}

      response.should redirect_to(new_utilisateur_session_path)
    end
  end

  describe "DELETE destroy" do
    describe "valid session" do
      before(:each) do
        utilisateur_session = double('utilisateur')
        allow(request.env['warden']).to receive(:authenticate!) { utilisateur_session }
      end

      it "redirects to the roles list" do
        role = create(:role)

        allow(Role).to receive(:find).with(role.id.to_s) {role}

        delete :destroy, {:id => role.to_param}
        response.should redirect_to(roles_url)
      end
    end

    it "invalid session" do
      allow(request.env['warden']).to receive(:authenticate!).and_throw(:warden, {:scope => :utilisateur})

      role = create(:role)
      delete :destroy, {:id => role.to_param}

      response.should redirect_to(new_utilisateur_session_path)
    end
  end
end